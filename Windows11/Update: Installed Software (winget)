#------------------------------------------------------------------------------
# Script Author: Andy Walch
# Date Created:  2025-05-27
# Description:   This PowerShell script interactively finds and updates
#                installed applications using the winget package manager.
#                It lists upgradable apps, prompts the user (Y/N/A/S/Q)
#                for each update, and provides a final summary.
#------------------------------------------------------------------------------
# PowerShell Script for Interactive Application Updates via winget
# This version does not include any self-saving functionality.

# --- Initialization ---
$updatedApps = [System.Collections.Generic.List[PSCustomObject]]::new()
$skippedApps = [System.Collections.Generic.List[PSCustomObject]]::new()
$userQuit = $false

Write-Host "Starting interactive application update process..." -ForegroundColor Yellow

# 1. Update winget sources
Write-Host "`n Updating winget sources..."
winget source update
# You might want to add error checking for 'winget source update' if needed.
Write-Host "Source update complete."

# 2. Get list of upgradable packages
Write-Host "`n Checking for available application updates..."
# Use --accept-source-agreements to prevent prompts if sources were just added/updated
$upgradeableOutput = winget list --upgrade-available --accept-source-agreements
# For testing parsing without live winget:
# $upgradeableOutput = @"
# Name                               Id                                 Version      Available    Source
# ----------------------------------------------------------------------------------------------------
# Test App 1                         Test.App1                          1.0.0        1.1.0        winget
# Another Test App                   Another.TestApp                    2.1.5        2.2.0        winget
# Yet Another App with spaces        Yet.Another.App                    3.0          3.0.1        winget
# Failing App Example                Failing.App.Example                0.9          1.0          winget
# "@ -split [System.Environment]::NewLine


$appsToProcess = [System.Collections.Generic.List[PSCustomObject]]::new()
$lines = $upgradeableOutput -split [System.Environment]::NewLine

# --- MODIFIED SECTION TO FIND DATA LINES (PowerShell v2 compatible) ---
$dataLinesStartIndex = -1
for ($j = 0; $j -lt $lines.Length; $j++) {
    if ($lines[$j] -match '^-{5,}') { # Match the "----" separator line
        $dataLinesStartIndex = $j + 1 # Data starts on the line *after* the separator
        break
    }
}

$dataLines = @() # Initialize as an empty array
if ($dataLinesStartIndex -ne -1 -and $dataLinesStartIndex -lt $lines.Length) {
    # Select lines *after* the separator line up to the end of the array
    $dataLines = $lines[$dataLinesStartIndex..($lines.Length - 1)]
}
# --- END OF MODIFIED SECTION ---

foreach ($line in $dataLines) {
    $trimmedLine = $line.Trim()
    if ($trimmedLine.Length -eq 0) { continue }

    # Regex to parse: Name (can have spaces, non-greedy) ## ID (no spaces) # Version (no spaces) # Available (no spaces) # Source (optional, no spaces)
    $regex = '^(?<Name>.+?)\s{2,}(?<Id>\S+)\s+(?<Version>\S+)\s+(?<Available>\S+)(\s+(?<Source>\S+))?$'
    $match = [regex]::Match($trimmedLine, $regex)

    if ($match.Success) {
        $appsToProcess.Add([PSCustomObject]@{
            Name             = $match.Groups['Name'].Value.Trim()
            Id               = $match.Groups['Id'].Value.Trim()
            CurrentVersion   = $match.Groups['Version'].Value.Trim()
            AvailableVersion = $match.Groups['Available'].Value.Trim()
            Source           = if ($match.Groups['Source'].Success) { $match.Groups['Source'].Value.Trim() } else { "" }
        })
    } else {
        Write-Warning "Could not parse line: $trimmedLine"
    }
}

if ($appsToProcess.Count -eq 0) {
    Write-Host "`n No application updates found after checking sources." -ForegroundColor Green
    exit
}

Write-Host "`nFound $($appsToProcess.Count) application(s) with available updates:" -ForegroundColor Cyan
$appsToProcess | Format-Table Name, CurrentVersion, AvailableVersion, Id -AutoSize


# 3. Interactive Prompt and Update
$updateAllRemaining = $false
$skipAllRemaining = $false

for ($i = 0; $i -lt $appsToProcess.Count; $i++) {
    $app = $appsToProcess[$i]

    if ($userQuit) { # If (Q)uit was chosen in a previous iteration
        $skippedApps.Add([PSCustomObject]@{
            Name             = $app.Name
            Id               = $app.Id
            CurrentVersion   = $app.CurrentVersion
            AvailableVersion = $app.AvailableVersion
            Status           = "Skipped (User Quit)"
        })
        continue
    }

    if ($skipAllRemaining) {
        $skippedApps.Add([PSCustomObject]@{
            Name             = $app.Name
            Id               = $app.Id
            CurrentVersion   = $app.CurrentVersion
            AvailableVersion = $app.AvailableVersion
            Status           = "Skipped (All Remaining)"
        })
        continue
    }

    $proceedWithUpdate = $false
    $currentStatus = "" # For clarity in skipped list

    if ($updateAllRemaining) {
        $proceedWithUpdate = $true
        Write-Host "`nAuto-updating $($app.Name) (version $($app.CurrentVersion) -> $($app.AvailableVersion)) due to 'Update All' selection." -ForegroundColor Green
    } else {
        Write-Host "`n--- Processing app $(($i)+1) of $($appsToProcess.Count) ---"
        Write-Host "  Name:             $($app.Name)"
        Write-Host "  Current Version:  $($app.CurrentVersion)"
        Write-Host "  Available Version:$($app.AvailableVersion)"
        Write-Host "  ID:               $($app.Id)"

        $validChoice = $false
        while (-not $validChoice) {
            $rawChoice = Read-Host "Update this application? (Y)es, (N)o, (A)ll remaining, (S)kip all remaining, (Q)uit"
            switch -Regex ($rawChoice.ToUpper()) {
                '^Y$' { $proceedWithUpdate = $true;  $validChoice = $true; $currentStatus = "Chosen for update" }
                '^N$' { $proceedWithUpdate = $false; $validChoice = $true; $currentStatus = "Skipped (No)" }
                '^A$' { $proceedWithUpdate = $true;  $updateAllRemaining = $true; $validChoice = $true; $currentStatus = "Chosen for update (All)" }
                '^S$' { $proceedWithUpdate = $false; $skipAllRemaining = $true;   $validChoice = $true; $currentStatus = "Skipped (All Remaining)" }
                '^Q$' { $proceedWithUpdate = $false; $skipAllRemaining = $true;   $validChoice = $true; $userQuit = $true; $currentStatus = "Skipped (User Quit)" }
                default { Write-Warning "Invalid choice. Please enter Y, N, A, S, or Q." }
            }
        }
    }

    if ($userQuit -and (-not $proceedWithUpdate)) { # If Quit was chosen, ensure we record it as skipped. $currentStatus is already set.
         # Loop will continue to next iteration and $userQuit flag will handle it.
    }

    if ($proceedWithUpdate) {
        Write-Host "Attempting to update $($app.Name) to $($app.AvailableVersion)..."
        winget upgrade --id $app.Id --version $app.AvailableVersion --silent --accept-package-agreements --accept-source-agreements
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "$($app.Name) updated successfully (or was already up-to-date with the target version)." -ForegroundColor Green
            $updatedApps.Add([PSCustomObject]@{
                Name             = $app.Name
                Id               = $app.Id
                FromVersion      = $app.CurrentVersion
                ToVersion        = $app.AvailableVersion 
                Status           = "Updated"
            })
        } else {
            Write-Warning " Failed to update $($app.Name). Winget exit code: $LASTEXITCODE"
            $skippedApps.Add([PSCustomObject]@{
                Name             = $app.Name
                Id               = $app.Id
                CurrentVersion   = $app.CurrentVersion
                AvailableVersion = $app.AvailableVersion
                Status           = "Update Failed (Code: $LASTEXITCODE)"
            })
        }
    } else { # Handles N, S, Q choices where proceedWithUpdate is false
        Write-Host "Skipping update for $($app.Name)."
        $skippedApps.Add([PSCustomObject]@{
            Name             = $app.Name
            Id               = $app.Id
            CurrentVersion   = $app.CurrentVersion
            AvailableVersion = $app.AvailableVersion
            Status           = $currentStatus 
        })
        if ($userQuit) {
             Write-Host "User chose to quit. No more applications will be processed if loop continues." -ForegroundColor Yellow
        } elseif ($skipAllRemaining -and $currentStatus -eq "Skipped (All Remaining)") { 
            Write-Host "Skipping all further applications as per 'Skip all remaining' command." -ForegroundColor Yellow
        }
    }
}


# 4. Final Summary
Write-Host "`n`n--- Update Summary ---" -ForegroundColor Cyan

if ($updatedApps.Count -gt 0) {
    Write-Host "`n Software Updated Successfully:" -ForegroundColor Green
    $updatedApps | Format-Table Name, FromVersion, ToVersion, Id -AutoSize
} else {
    Write-Host "`n No software was updated in this session." -ForegroundColor Yellow
}

if ($skippedApps.Count -gt 0) {
    Write-Host "`n Software Not Updated (Skipped or Failed):" -ForegroundColor Yellow
    $skippedApps | Sort-Object Name | Format-Table Name, CurrentVersion, AvailableVersion, Status, Id -AutoSize
} else {
    if ($updatedApps.Count -gt 0) { 
        Write-Host "`nℹ️ All detected updates were processed successfully and no software was skipped." -ForegroundColor Green
    }
}

Write-Host "`n Interactive application update process finished." -ForegroundColor Yellow
